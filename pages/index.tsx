import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";

import HeroText from "../Components/HeroText/HeroText";
import styles from "../styles/Home.module.css";
import tableStyles from "../styles/Table.module.css";
import LeetQuestion from "../types/LeetQuestion";
import TableHead from "../Components/TableHead/TableHead";
import SortOption from "../types/SortOption";
import {
  compareDifficulties,
  compareDislikes,
  compareLikes,
  compareNumber,
  comparePercentLiked,
  compareTitles,
} from "../Utils/SortFuncs";
import QuestionTableRow from "../Components/Row/TableRow";
import {
  speakJson,
  blindJson,
  amazonJSON,
  googleJSON,
  allJson,
} from "../consts/Consts";

const Home: NextPage = () => {
  const [fullProblemList, setfullProblemList] = useState(speakJson);
  const [problemList, setproblemList] = useState(fullProblemList);
  const [randNum, setrandNum] = useState("10");
  const [sortOption, setsortOption] = useState({
    isAscending: false,
    category: "Number",
  });
  function getRandom(arr: any[], n: number) {
    let result = new Array(n),
      len = arr.length,
      taken = new Array(len);
    if (n > len)
      throw new RangeError("getRandom: more elements taken than available");
    while (n--) {
      const x = Math.floor(Math.random() * len);
      result[n] = arr[x in taken ? taken[x] : x];
      taken[x] = --len in taken ? taken[len] : len;
    }
    return result;
  }
  function getRandList(
    possibleSelection: any,
    jsonList: LeetQuestion[],
    setList: (val: any[]) => void
  ) {
    if (
      typeof possibleSelection != "string" ||
      isNaN(parseInt(possibleSelection))
    ) {
      return;
    }
    let selectionNum = parseInt(possibleSelection);
    if (selectionNum > jsonList.length) {
      //selectionNum = jsonList.length;
      setList(jsonList);
      return;
    }
    setproblemList(getRandom(jsonList, selectionNum));
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <HeroText
          bodyText="Choose a curated set of Leetcode questions to practice, or get a random selection!"
          headingText="Improve Your Skills!"
        />
        <div id={tableStyles.tableButtonDiv}>
          <div>
            <label htmlFor="problem_num">How many random questions?</label>

            <input
              name="problem_num"
              id="problem_num"
              onChange={(e) => {
                setrandNum(e.target.value);
              }}
            ></input>
            <button
              onClick={() => {
                getRandList(randNum, fullProblemList, setproblemList);
                setsortOption({ isAscending: false, category: "Number" });
              }}
            >
              Get Problems
            </button>
          </div>
          <div id={tableStyles.selectDiv}>
            <label htmlFor="questionlist">Choose a question set</label>
            <select
              name="questionlist"
              id="questionSelect"
              onChange={() => {
                setsortOption({ isAscending: false, category: "Number" });
              }}
            >
              <option
                onClick={() => {
                  setfullProblemList(speakJson);
                  setproblemList(speakJson);
                }}
              >
                Speak Questions
              </option>
              <option
                onClick={() => {
                  setfullProblemList(blindJson);
                  setproblemList(blindJson);
                }}
              >
                Blind 75
              </option>
              <option
                onClick={() => {
                  setfullProblemList(amazonJSON);
                  setproblemList(amazonJSON);
                }}
              >
                Amazon Questions
              </option>
              <option
                onClick={() => {
                  setfullProblemList(googleJSON);
                  setproblemList(googleJSON);
                }}
              >
                Google Questions
              </option>
              <option
                onClick={() => {
                  setfullProblemList(allJson);
                  setproblemList(allJson);
                }}
              >
                All Questions
              </option>
            </select>
          </div>
        </div>
        <table id={tableStyles.table}>
          <thead>
            <tr>
              <TableHead
                sortFunc={compareNumber}
                currentList={problemList}
                setCurrentList={setproblemList}
                setSortOption={setsortOption}
                sortOption={sortOption as SortOption}
                headText="Number"
              />
              <TableHead
                sortFunc={compareDifficulties}
                currentList={problemList}
                setCurrentList={setproblemList}
                setSortOption={setsortOption}
                sortOption={sortOption as SortOption}
                headText="Difficulty"
              />
              <TableHead
                sortFunc={compareTitles}
                currentList={problemList}
                setCurrentList={setproblemList}
                setSortOption={setsortOption}
                sortOption={sortOption as SortOption}
                headText="Name"
              />
              <TableHead
                sortFunc={compareLikes}
                currentList={problemList}
                setCurrentList={setproblemList}
                setSortOption={setsortOption}
                sortOption={sortOption as SortOption}
                headText="Likes"
              />
              <TableHead
                sortFunc={compareDislikes}
                currentList={problemList}
                setCurrentList={setproblemList}
                setSortOption={setsortOption}
                sortOption={sortOption as SortOption}
                headText="Dislikes"
              />
              <TableHead
                sortFunc={comparePercentLiked}
                currentList={problemList}
                setCurrentList={setproblemList}
                setSortOption={setsortOption}
                sortOption={sortOption as SortOption}
                headText="Percent Liked"
              />
            </tr>
          </thead>
          <tbody id={tableStyles.tbody}>
            {problemList.map((val, i) => (
              <QuestionTableRow
                key={`QuestionNum${i}`}
                question={val}
                number={i + 1}
              />
            ))}
          </tbody>
        </table>
        <p>
          Note: premium questions have been removed, which is why the blind 75
          only has 70 questions.
        </p>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://personal2-1.vercel.app/"
          target="_blank"
          rel="noopener noreferrer"
        >
          Made by Daniel Felsenthal
        </a>
      </footer>
    </div>
  );
};

export default Home;
